{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "imdbDATASET",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "imdbOutputDataset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "imdbOutputDataset",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "aggregation"
				},
				{
					"name": "Aggregate1"
				}
			],
			"script": "source(output(\n\t\tid as string,\n\t\tname as string,\n\t\tgenre as string,\n\t\trating as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 derive(year = toInteger(trim(right(name, 6),'()')),\n\t\tname = toString(left(name, length(name)-6))) ~> aggregation\naggregation aggregate(groupBy(year),\n\tMoviesCount = count()) ~> Aggregate1\naggregation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['imdbSent'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['MoviesBYYear.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
		}
	}
}